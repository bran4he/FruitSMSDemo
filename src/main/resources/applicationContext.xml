<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"

	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
    
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
    ">

	<context:property-placeholder location="classpath:jdbc.properties" />

	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}"/>  
        <property name="url" value="${url}"/>  
        <property name="username" value="${username}"/>  
        <property name="password" value="${password}"/>  
         <!-- 连接池启动时的初始值 -->  
         <property name="initialSize" value="${initialSize}"/>  
         <!-- 连接池的最大值 -->  
         <property name="maxActive" value="${maxActive}"/>  
         <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->  
         <property name="maxIdle" value="${maxIdle}"/>  
         <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->  
         <property name="minIdle" value="${minIdle}"/> 
	</bean>
	
    <!--注解方式实现事务-->
    <tx:annotation-driven transaction-manager="txManager"/>

	<!--spring声明式事务管理控制-->
    <!--配置事务管理器类-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<mvc:annotation-driven />
	<context:component-scan base-package="com.fruit.sales" />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>


     <!-- 静态资源解析包括 ：js、css、img、 
    <mvc:resources location="/" mapping="**.html"/>  
    <mvc:resources location="/" mapping="**.css"/>  
    <mvc:resources location="/" mapping="**.png"/>  
    <mvc:resources location="/" mapping="**.gif"/>  
    <mvc:resources location="/" mapping="**.jpg"/>
    <mvc:resources location="/" mapping="**.ico"/>
    <mvc:resources location="/" mapping="**.js"/>
     -->  
    
    <mvc:resources location="/WEB-INF/static/" mapping="/static/**" />
    
     <!-- 拦截器 -->  
     <mvc:interceptors>  
         <!-- 多个拦截器，顺序执行 --> 
         <mvc:interceptor>  
            <!-- 先匹配所有路径，然后排除不需要检查的路径  -->
            <mvc:mapping path="/**" />
            
            <!-- 与登录相关的请求 
            <mvc:exclude-mapping path="/index/**" />
            -->
            <mvc:exclude-mapping path="/login/**" />
            <!-- integration api -->
            <mvc:exclude-mapping path="/rest/**" />
            
            <!-- 以下是静态资源 -->
            <mvc:exclude-mapping path="/static/**" />
            
            <!-- 客户端文件上传下载，不使用该校验 
            <mvc:exclude-mapping path="/download/**" />
            <mvc:exclude-mapping path="/upload/**" />
            -->

            <!-- 用户是否已经登录的检查 -->
            <bean id="loginInterceptor" class="com.fruit.sales.web.interceptor.LoginInterceptor"></bean>  
         </mvc:interceptor>  
         
         <mvc:interceptor>
         	<!-- mapping rest rquest -->
            <mvc:mapping path="/rest/**" />
            <!-- exclude register -->
            <mvc:exclude-mapping path="/rest/user/register/**" />
            
            <mvc:exclude-mapping path="/static/**" />
			
			<!-- auth validate -->
            <bean id="integrationAuthInterceptor" class="com.fruit.sales.web.interceptor.IntegrationAuthInterceptor"></bean>  
         </mvc:interceptor>  
     </mvc:interceptors> 


	 <!-- 启动对@AspectJ注解的支持 --> 
     <!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->
     <!-- 注：对于单利模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->

     <!--如果不写proxy-target-class="true"这句话也没问题-->
     <aop:aspectj-autoproxy proxy-target-class="true"/>

</beans>